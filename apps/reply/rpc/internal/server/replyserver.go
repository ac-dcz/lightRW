// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: reply.proto

package server

import (
	"context"

	"github.com/ac-dcz/lightRW/apps/reply/rpc/internal/logic"
	"github.com/ac-dcz/lightRW/apps/reply/rpc/internal/svc"
	"github.com/ac-dcz/lightRW/apps/reply/rpc/pb"
)

type ReplyServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedReplyServer
}

func NewReplyServer(svcCtx *svc.ServiceContext) *ReplyServer {
	return &ReplyServer{
		svcCtx: svcCtx,
	}
}

func (s *ReplyServer) ProposeReply(ctx context.Context, in *pb.ProposeReplyReq) (*pb.ProposeReplyResp, error) {
	l := logic.NewProposeReplyLogic(ctx, s.svcCtx)
	return l.ProposeReply(in)
}

func (s *ReplyServer) ReplyByReplyId(ctx context.Context, in *pb.ReplyByReplyIdReq) (*pb.ReplyByReplyIdResp, error) {
	l := logic.NewReplyByReplyIdLogic(ctx, s.svcCtx)
	return l.ReplyByReplyId(in)
}

func (s *ReplyServer) ReplyBySSku(ctx context.Context, in *pb.ReplyBySSkuReq) (*pb.ReplyBySSkuResp, error) {
	l := logic.NewReplyBySSkuLogic(ctx, s.svcCtx)
	return l.ReplyBySSku(in)
}

func (s *ReplyServer) ReplyByReviewId(ctx context.Context, in *pb.ReplyByReviewIdReq) (*pb.ReplyByReviewIdResp, error) {
	l := logic.NewReplyByReviewIdLogic(ctx, s.svcCtx)
	return l.ReplyByReviewId(in)
}

func (s *ReplyServer) ReplyByMid(ctx context.Context, in *pb.ReplyByMidReq) (*pb.ReplyByMidResp, error) {
	l := logic.NewReplyByMidLogic(ctx, s.svcCtx)
	return l.ReplyByMid(in)
}

func (s *ReplyServer) UpdateStatus(ctx context.Context, in *pb.UpdateStatusReq) (*pb.UpdateStatusResp, error) {
	l := logic.NewUpdateStatusLogic(ctx, s.svcCtx)
	return l.UpdateStatus(in)
}
