// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.1
// source: reply.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Reply_ProposeReply_FullMethodName    = "/reply.Reply/ProposeReply"
	Reply_ReplyByReplyId_FullMethodName  = "/reply.Reply/ReplyByReplyId"
	Reply_ReplyBySSku_FullMethodName     = "/reply.Reply/ReplyBySSku"
	Reply_ReplyByReviewId_FullMethodName = "/reply.Reply/ReplyByReviewId"
	Reply_ReplyByMid_FullMethodName      = "/reply.Reply/ReplyByMid"
	Reply_UpdateStatus_FullMethodName    = "/reply.Reply/UpdateStatus"
)

// ReplyClient is the client API for Reply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyClient interface {
	ProposeReply(ctx context.Context, in *ProposeReplyReq, opts ...grpc.CallOption) (*ProposeReplyResp, error)
	ReplyByReplyId(ctx context.Context, in *ReplyByReplyIdReq, opts ...grpc.CallOption) (*ReplyByReplyIdResp, error)
	ReplyBySSku(ctx context.Context, in *ReplyBySSkuReq, opts ...grpc.CallOption) (*ReplyBySSkuResp, error)
	ReplyByReviewId(ctx context.Context, in *ReplyByReviewIdReq, opts ...grpc.CallOption) (*ReplyByReviewIdResp, error)
	ReplyByMid(ctx context.Context, in *ReplyByMidReq, opts ...grpc.CallOption) (*ReplyByMidResp, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusResp, error)
}

type replyClient struct {
	cc grpc.ClientConnInterface
}

func NewReplyClient(cc grpc.ClientConnInterface) ReplyClient {
	return &replyClient{cc}
}

func (c *replyClient) ProposeReply(ctx context.Context, in *ProposeReplyReq, opts ...grpc.CallOption) (*ProposeReplyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposeReplyResp)
	err := c.cc.Invoke(ctx, Reply_ProposeReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ReplyByReplyId(ctx context.Context, in *ReplyByReplyIdReq, opts ...grpc.CallOption) (*ReplyByReplyIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyByReplyIdResp)
	err := c.cc.Invoke(ctx, Reply_ReplyByReplyId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ReplyBySSku(ctx context.Context, in *ReplyBySSkuReq, opts ...grpc.CallOption) (*ReplyBySSkuResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyBySSkuResp)
	err := c.cc.Invoke(ctx, Reply_ReplyBySSku_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ReplyByReviewId(ctx context.Context, in *ReplyByReviewIdReq, opts ...grpc.CallOption) (*ReplyByReviewIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyByReviewIdResp)
	err := c.cc.Invoke(ctx, Reply_ReplyByReviewId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) ReplyByMid(ctx context.Context, in *ReplyByMidReq, opts ...grpc.CallOption) (*ReplyByMidResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyByMidResp)
	err := c.cc.Invoke(ctx, Reply_ReplyByMid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResp)
	err := c.cc.Invoke(ctx, Reply_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplyServer is the server API for Reply service.
// All implementations must embed UnimplementedReplyServer
// for forward compatibility.
type ReplyServer interface {
	ProposeReply(context.Context, *ProposeReplyReq) (*ProposeReplyResp, error)
	ReplyByReplyId(context.Context, *ReplyByReplyIdReq) (*ReplyByReplyIdResp, error)
	ReplyBySSku(context.Context, *ReplyBySSkuReq) (*ReplyBySSkuResp, error)
	ReplyByReviewId(context.Context, *ReplyByReviewIdReq) (*ReplyByReviewIdResp, error)
	ReplyByMid(context.Context, *ReplyByMidReq) (*ReplyByMidResp, error)
	UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateStatusResp, error)
	mustEmbedUnimplementedReplyServer()
}

// UnimplementedReplyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplyServer struct{}

func (UnimplementedReplyServer) ProposeReply(context.Context, *ProposeReplyReq) (*ProposeReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeReply not implemented")
}
func (UnimplementedReplyServer) ReplyByReplyId(context.Context, *ReplyByReplyIdReq) (*ReplyByReplyIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyByReplyId not implemented")
}
func (UnimplementedReplyServer) ReplyBySSku(context.Context, *ReplyBySSkuReq) (*ReplyBySSkuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyBySSku not implemented")
}
func (UnimplementedReplyServer) ReplyByReviewId(context.Context, *ReplyByReviewIdReq) (*ReplyByReviewIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyByReviewId not implemented")
}
func (UnimplementedReplyServer) ReplyByMid(context.Context, *ReplyByMidReq) (*ReplyByMidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyByMid not implemented")
}
func (UnimplementedReplyServer) UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedReplyServer) mustEmbedUnimplementedReplyServer() {}
func (UnimplementedReplyServer) testEmbeddedByValue()               {}

// UnsafeReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServer will
// result in compilation errors.
type UnsafeReplyServer interface {
	mustEmbedUnimplementedReplyServer()
}

func RegisterReplyServer(s grpc.ServiceRegistrar, srv ReplyServer) {
	// If the following call pancis, it indicates UnimplementedReplyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reply_ServiceDesc, srv)
}

func _Reply_ProposeReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ProposeReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ProposeReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ProposeReply(ctx, req.(*ProposeReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ReplyByReplyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyByReplyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReplyByReplyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ReplyByReplyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReplyByReplyId(ctx, req.(*ReplyByReplyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ReplyBySSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyBySSkuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReplyBySSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ReplyBySSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReplyBySSku(ctx, req.(*ReplyBySSkuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ReplyByReviewId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyByReviewIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReplyByReviewId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ReplyByReviewId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReplyByReviewId(ctx, req.(*ReplyByReviewIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_ReplyByMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyByMidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).ReplyByMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_ReplyByMid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).ReplyByMid(ctx, req.(*ReplyByMidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reply_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Reply_ServiceDesc is the grpc.ServiceDesc for Reply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reply.Reply",
	HandlerType: (*ReplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeReply",
			Handler:    _Reply_ProposeReply_Handler,
		},
		{
			MethodName: "ReplyByReplyId",
			Handler:    _Reply_ReplyByReplyId_Handler,
		},
		{
			MethodName: "ReplyBySSku",
			Handler:    _Reply_ReplyBySSku_Handler,
		},
		{
			MethodName: "ReplyByReviewId",
			Handler:    _Reply_ReplyByReviewId_Handler,
		},
		{
			MethodName: "ReplyByMid",
			Handler:    _Reply_ReplyByMid_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Reply_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reply.proto",
}
