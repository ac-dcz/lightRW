syntax = "v1"

info (
	title:   "store api"
	desc:    "store api file"
	author:  "dcz"
	email:   "chaozhengding@hust.edu.cn"
	version: "v1"
)

type GoodsInfo {
	Sku   string `json:"sku"`
	Stock uint64 `json:"stock"`
}

type StoreInfo {
	Id         uint64      `json:"id"`
	StoreId    uint64      `json:"store_id"`
	Name       string      `json:"name"`
	Uid        uint64      `json:"uid"`
	CreateDate string      `json:"create_date"`
	GoodsInfos []GoodsInfo `json:"goods_infos"`
}

type (
	RegistryStoreReq {
		Name  string `form:"name"`
		Token string `form:"token,optional"`
	}
	RegistryStoreResp {
		StoreInfo
	}
	StoreInfoReq {
		StoreId uint64 `form:"store_id"`
	}
	StoreInfoResp {
		StoreInfo
	}
	AddGoodsReq {
		StoreId uint64 `json:"store_id"`
		Sku     string `json:"sku"`
		Stock   uint64 `json:"stock"`
		Token   string `form:"token,optional"`
	}
	GoodsStockReq {
		StoreId uint64 `form:"store_id"`
		Sku     string `form:"sku"`
	}
	GoodsStockResp {
		Stock uint64 `json:"stock"`
	}
)

@server (
	jwt:    Auth
	prefix: /api/v1/store
)
service store-api {
	@handler RegistryStore
	post /registry (RegistryStoreReq) returns (RegistryStoreResp)

	@handler AddGoods
	post /add/goods (AddGoodsReq)
}

@server (
	prefix: /api/v1/store
)
service store-api {
	@handler GetStoreInfo
	get /info (StoreInfoReq) returns (StoreInfoResp)

	@handler GetGoodsStock
	get /goods/stock (GoodsStockReq) returns (GoodsStockResp)
}

