// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrdersIdPrefix                   = "cache:orders:id:"
	cacheOrdersOrderIdUidStoreIdSkuPrefix = "cache:orders:orderId:uid:storeId:sku:"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Orders, error)
		FindOneByOrderIdUidStoreIdSku(ctx context.Context, orderId uint64, uid uint64, storeId uint64, sku string) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	Orders struct {
		Id       uint64    `db:"id"`
		OrderId  uint64    `db:"order_id"` // 订单id
		Uid      uint64    `db:"uid"`      // 用户id
		StoreId  uint64    `db:"store_id"` // 店铺id
		Sku      string    `db:"sku"`      // sku
		Num      uint64    `db:"num"`      // 购买数量
		Price    float64   `db:"price"`    // 单价
		Status   uint64    `db:"status"`   // 0: 待支付;1: 已支付;2: 取消;3: 过期
		CreateAt time.Time `db:"create_at"`
		UpdateAt time.Time `db:"update_at"`
	}
)

func newOrdersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrdersModel {
	return &defaultOrdersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`orders`",
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, id)
	ordersOrderIdUidStoreIdSkuKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheOrdersOrderIdUidStoreIdSkuPrefix, data.OrderId, data.Uid, data.StoreId, data.Sku)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ordersIdKey, ordersOrderIdUidStoreIdSkuKey)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id uint64) (*Orders, error) {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, id)
	var resp Orders
	err := m.QueryRowCtx(ctx, &resp, ordersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneByOrderIdUidStoreIdSku(ctx context.Context, orderId uint64, uid uint64, storeId uint64, sku string) (*Orders, error) {
	ordersOrderIdUidStoreIdSkuKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheOrdersOrderIdUidStoreIdSkuPrefix, orderId, uid, storeId, sku)
	var resp Orders
	err := m.QueryRowIndexCtx(ctx, &resp, ordersOrderIdUidStoreIdSkuKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? and `uid` = ? and `store_id` = ? and `sku` = ? limit 1", ordersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderId, uid, storeId, sku); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, data.Id)
	ordersOrderIdUidStoreIdSkuKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheOrdersOrderIdUidStoreIdSkuPrefix, data.OrderId, data.Uid, data.StoreId, data.Sku)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.Uid, data.StoreId, data.Sku, data.Num, data.Price, data.Status)
	}, ordersIdKey, ordersOrderIdUidStoreIdSkuKey)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, newData *Orders) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ordersIdKey := fmt.Sprintf("%s%v", cacheOrdersIdPrefix, data.Id)
	ordersOrderIdUidStoreIdSkuKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheOrdersOrderIdUidStoreIdSkuPrefix, data.OrderId, data.Uid, data.StoreId, data.Sku)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ordersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderId, newData.Uid, newData.StoreId, newData.Sku, newData.Num, newData.Price, newData.Status, newData.Id)
	}, ordersIdKey, ordersOrderIdUidStoreIdSkuKey)
	return err
}

func (m *defaultOrdersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrdersIdPrefix, primary)
}

func (m *defaultOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
