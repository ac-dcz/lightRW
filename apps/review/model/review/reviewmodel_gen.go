// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package review

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	reviewFieldNames          = builder.RawFieldNames(&Review{})
	reviewRows                = strings.Join(reviewFieldNames, ",")
	reviewRowsExpectAutoSet   = strings.Join(stringx.Remove(reviewFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	reviewRowsWithPlaceHolder = strings.Join(stringx.Remove(reviewFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheReviewIdPrefix                   = "cache:review:id:"
	cacheReviewUidStoreIdSkuOrderIdPrefix = "cache:review:uid:storeId:sku:orderId:"
)

type (
	reviewModel interface {
		Insert(ctx context.Context, data *Review) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Review, error)
		FindOneByUidStoreIdSkuOrderId(ctx context.Context, uid uint64, storeId uint64, sku string, orderId uint64) (*Review, error)
		Update(ctx context.Context, data *Review) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultReviewModel struct {
		sqlc.CachedConn
		table string
	}

	Review struct {
		Id            uint64    `db:"id"`
		Uid           uint64    `db:"uid"`            // 用户id
		StoreId       uint64    `db:"store_id"`       // 店铺id
		Sku           string    `db:"sku"`            // sku
		OrderId       uint64    `db:"order_id"`       // 订单id
		Score         uint64    `db:"score"`          // 0差评/1中评/2好评
		GoodsDesc     string    `db:"goods_desc"`     // 商品描述
		HasImage      byte      `db:"has_image"`      // 0有/1无
		ImageJson     string    `db:"image_json"`     // image json
		StoreScore    uint64    `db:"store_score"`    // 1-5星
		IsReply       byte      `db:"is_reply"`       // 0否/1是
		Status        uint64    `db:"status"`         // 状态:10待审核；20审核通过；30审核不通过；40隐藏
		OpReason      string    `db:"op_reason"`      // 运营审核拒绝原因
		GoodsSnapshot string    `db:"goods_snapshot"` // 商品快照信息
		IsDel         byte      `db:"is_del"`         // 0否/1是
		CreateAt      time.Time `db:"create_at"`      // 创建时间
		UpdateAt      time.Time `db:"update_at"`      // 更新时间
	}
)

func newReviewModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReviewModel {
	return &defaultReviewModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`review`",
	}
}

func (m *defaultReviewModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, id)
	reviewUidStoreIdSkuOrderIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheReviewUidStoreIdSkuOrderIdPrefix, data.Uid, data.StoreId, data.Sku, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, reviewIdKey, reviewUidStoreIdSkuOrderIdKey)
	return err
}

func (m *defaultReviewModel) FindOne(ctx context.Context, id uint64) (*Review, error) {
	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, id)
	var resp Review
	err := m.QueryRowCtx(ctx, &resp, reviewIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reviewRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReviewModel) FindOneByUidStoreIdSkuOrderId(ctx context.Context, uid uint64, storeId uint64, sku string, orderId uint64) (*Review, error) {
	reviewUidStoreIdSkuOrderIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheReviewUidStoreIdSkuOrderIdPrefix, uid, storeId, sku, orderId)
	var resp Review
	err := m.QueryRowIndexCtx(ctx, &resp, reviewUidStoreIdSkuOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? and `store_id` = ? and `sku` = ? and `order_id` = ? limit 1", reviewRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid, storeId, sku, orderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReviewModel) Insert(ctx context.Context, data *Review) (sql.Result, error) {
	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, data.Id)
	reviewUidStoreIdSkuOrderIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheReviewUidStoreIdSkuOrderIdPrefix, data.Uid, data.StoreId, data.Sku, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, reviewRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.StoreId, data.Sku, data.OrderId, data.Score, data.GoodsDesc, data.HasImage, data.ImageJson, data.StoreScore, data.IsReply, data.Status, data.OpReason, data.GoodsSnapshot, data.IsDel)
	}, reviewIdKey, reviewUidStoreIdSkuOrderIdKey)
	return ret, err
}

func (m *defaultReviewModel) Update(ctx context.Context, newData *Review) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, data.Id)
	reviewUidStoreIdSkuOrderIdKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheReviewUidStoreIdSkuOrderIdPrefix, data.Uid, data.StoreId, data.Sku, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, reviewRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uid, newData.StoreId, newData.Sku, newData.OrderId, newData.Score, newData.GoodsDesc, newData.HasImage, newData.ImageJson, newData.StoreScore, newData.IsReply, newData.Status, newData.OpReason, newData.GoodsSnapshot, newData.IsDel, newData.Id)
	}, reviewIdKey, reviewUidStoreIdSkuOrderIdKey)
	return err
}

func (m *defaultReviewModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheReviewIdPrefix, primary)
}

func (m *defaultReviewModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reviewRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReviewModel) tableName() string {
	return m.table
}
