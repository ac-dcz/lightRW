// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	reviewFieldNames          = builder.RawFieldNames(&Review{})
	reviewRows                = strings.Join(reviewFieldNames, ",")
	reviewRowsExpectAutoSet   = strings.Join(stringx.Remove(reviewFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	reviewRowsWithPlaceHolder = strings.Join(stringx.Remove(reviewFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheReviewIdPrefix       = "cache:review:id:"
	cacheReviewReviewIdPrefix = "cache:review:reviewId:"
)

type (
	reviewModel interface {
		Insert(ctx context.Context, data *Review) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Review, error)
		FindOneByReviewId(ctx context.Context, reviewId uint64) (*Review, error)
		Update(ctx context.Context, data *Review) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultReviewModel struct {
		sqlc.CachedConn
		table string
	}

	Review struct {
		Id            uint64    `db:"id"`
		ReviewId      uint64    `db:"review_id"`      // 评论id
		Uid           uint64    `db:"uid"`            // 用户id
		OrderId       uint64    `db:"order_id"`       // 订单id
		StoreId       uint64    `db:"store_id"`       // 店铺id
		Sku           string    `db:"sku"`            // sku
		Score         uint64    `db:"score"`          // 0差评/1中评/2好评
		GoodsDesc     string    `db:"goods_desc"`     // 商品描述
		HasImage      uint64    `db:"has_image"`      // 1有/0无
		ImageJson     string    `db:"image_json"`     // image json
		StoreScore    uint64    `db:"store_score"`    // 1-5星
		IsReply       uint64    `db:"is_reply"`       // 0否/1是
		Status        uint64    `db:"status"`         // 状态:10待审核；20审核通过；30审核不通过；40隐藏
		OpReason      string    `db:"op_reason"`      // 运营审核拒绝原因
		GoodsSnapshot string    `db:"goods_snapshot"` // 商品快照信息
		IsDel         uint64    `db:"is_del"`         // 0否/1是
		CreateAt      time.Time `db:"create_at"`      // 创建时间
		UpdateAt      time.Time `db:"update_at"`      // 更新时间
	}
)

func newReviewModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReviewModel {
	return &defaultReviewModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`review`",
	}
}

func (m *defaultReviewModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, id)
	reviewReviewIdKey := fmt.Sprintf("%s%v", cacheReviewReviewIdPrefix, data.ReviewId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, reviewIdKey, reviewReviewIdKey)
	return err
}

func (m *defaultReviewModel) FindOne(ctx context.Context, id uint64) (*Review, error) {
	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, id)
	var resp Review
	err := m.QueryRowCtx(ctx, &resp, reviewIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reviewRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReviewModel) FindOneByReviewId(ctx context.Context, reviewId uint64) (*Review, error) {
	reviewReviewIdKey := fmt.Sprintf("%s%v", cacheReviewReviewIdPrefix, reviewId)
	var resp Review
	err := m.QueryRowIndexCtx(ctx, &resp, reviewReviewIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `review_id` = ? limit 1", reviewRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, reviewId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReviewModel) Insert(ctx context.Context, data *Review) (sql.Result, error) {
	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, data.Id)
	reviewReviewIdKey := fmt.Sprintf("%s%v", cacheReviewReviewIdPrefix, data.ReviewId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, reviewRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ReviewId, data.Uid, data.OrderId, data.StoreId, data.Sku, data.Score, data.GoodsDesc, data.HasImage, data.ImageJson, data.StoreScore, data.IsReply, data.Status, data.OpReason, data.GoodsSnapshot, data.IsDel)
	}, reviewIdKey, reviewReviewIdKey)
	return ret, err
}

func (m *defaultReviewModel) Update(ctx context.Context, newData *Review) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	reviewIdKey := fmt.Sprintf("%s%v", cacheReviewIdPrefix, data.Id)
	reviewReviewIdKey := fmt.Sprintf("%s%v", cacheReviewReviewIdPrefix, data.ReviewId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, reviewRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ReviewId, newData.Uid, newData.OrderId, newData.StoreId, newData.Sku, newData.Score, newData.GoodsDesc, newData.HasImage, newData.ImageJson, newData.StoreScore, newData.IsReply, newData.Status, newData.OpReason, newData.GoodsSnapshot, newData.IsDel, newData.Id)
	}, reviewIdKey, reviewReviewIdKey)
	return err
}

func (m *defaultReviewModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheReviewIdPrefix, primary)
}

func (m *defaultReviewModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reviewRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReviewModel) tableName() string {
	return m.table
}
