// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package userrpc

import (
	"context"

	"github.com/ac-dcz/lightRW/apps/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	SignInReq  = pb.SignInReq
	SignInResp = pb.SignInResp
	SignUpReq  = pb.SignUpReq
	SignUpResp = pb.SignUpResp
	User       = pb.User

	UserRpc interface {
		SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInResp, error)
		SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

func (m *defaultUserRpc) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.SignIn(ctx, in, opts...)
}

func (m *defaultUserRpc) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpResp, error) {
	client := pb.NewUserRpcClient(m.cli.Conn())
	return client.SignUp(ctx, in, opts...)
}
