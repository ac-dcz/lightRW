// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsStoreFieldNames          = builder.RawFieldNames(&GoodsStore{})
	goodsStoreRows                = strings.Join(goodsStoreFieldNames, ",")
	goodsStoreRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsStoreFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsStoreRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsStoreFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsStoreModel interface {
		Insert(ctx context.Context, data *GoodsStore) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GoodsStore, error)
		FindOneByStoreIdSku(ctx context.Context, storeId uint64, sku string) (*GoodsStore, error)
		Update(ctx context.Context, data *GoodsStore) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGoodsStoreModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsStore struct {
		Id       uint64    `db:"id"`
		StoreId  uint64    `db:"store_id"`
		Sku      string    `db:"sku"`       // sku
		Stock    uint64    `db:"stock"`     // 库存
		CreateAt time.Time `db:"create_at"` // 创建时间
		UpdateAt time.Time `db:"update_at"` // 更新时间
	}
)

func newGoodsStoreModel(conn sqlx.SqlConn) *defaultGoodsStoreModel {
	return &defaultGoodsStoreModel{
		conn:  conn,
		table: "`goods_store`",
	}
}

func (m *defaultGoodsStoreModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodsStoreModel) FindOne(ctx context.Context, id uint64) (*GoodsStore, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsStoreRows, m.table)
	var resp GoodsStore
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsStoreModel) FindOneByStoreIdSku(ctx context.Context, storeId uint64, sku string) (*GoodsStore, error) {
	var resp GoodsStore
	query := fmt.Sprintf("select %s from %s where `store_id` = ? and `sku` = ? limit 1", goodsStoreRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, storeId, sku)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsStoreModel) Insert(ctx context.Context, data *GoodsStore) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, goodsStoreRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StoreId, data.Sku, data.Stock)
	return ret, err
}

func (m *defaultGoodsStoreModel) Update(ctx context.Context, newData *GoodsStore) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsStoreRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.StoreId, newData.Sku, newData.Stock, newData.Id)
	return err
}

func (m *defaultGoodsStoreModel) tableName() string {
	return m.table
}
