// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: goods.proto

package goodsrpc

import (
	"context"

	"github.com/ac-dcz/lightRW/apps/goods/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Goods             = pb.Goods
	GoodsInfoReq      = pb.GoodsInfoReq
	GoodsInfoResp     = pb.GoodsInfoResp
	RegistryGoodsReq  = pb.RegistryGoodsReq
	RegistryGoodsResp = pb.RegistryGoodsResp

	GoodsRpc interface {
		RegistryGoods(ctx context.Context, in *RegistryGoodsReq, opts ...grpc.CallOption) (*RegistryGoodsResp, error)
		GoodsInfo(ctx context.Context, in *GoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoResp, error)
	}

	defaultGoodsRpc struct {
		cli zrpc.Client
	}
)

func NewGoodsRpc(cli zrpc.Client) GoodsRpc {
	return &defaultGoodsRpc{
		cli: cli,
	}
}

func (m *defaultGoodsRpc) RegistryGoods(ctx context.Context, in *RegistryGoodsReq, opts ...grpc.CallOption) (*RegistryGoodsResp, error) {
	client := pb.NewGoodsRpcClient(m.cli.Conn())
	return client.RegistryGoods(ctx, in, opts...)
}

func (m *defaultGoodsRpc) GoodsInfo(ctx context.Context, in *GoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoResp, error) {
	client := pb.NewGoodsRpcClient(m.cli.Conn())
	return client.GoodsInfo(ctx, in, opts...)
}
