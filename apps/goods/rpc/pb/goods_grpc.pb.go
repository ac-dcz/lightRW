// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.1
// source: goods.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoodsRpc_RegistryGoods_FullMethodName = "/goods.GoodsRpc/RegistryGoods"
	GoodsRpc_GoodsInfo_FullMethodName     = "/goods.GoodsRpc/GoodsInfo"
)

// GoodsRpcClient is the client API for GoodsRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsRpcClient interface {
	RegistryGoods(ctx context.Context, in *RegistryGoodsReq, opts ...grpc.CallOption) (*RegistryGoodsResp, error)
	GoodsInfo(ctx context.Context, in *GoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoResp, error)
}

type goodsRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsRpcClient(cc grpc.ClientConnInterface) GoodsRpcClient {
	return &goodsRpcClient{cc}
}

func (c *goodsRpcClient) RegistryGoods(ctx context.Context, in *RegistryGoodsReq, opts ...grpc.CallOption) (*RegistryGoodsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistryGoodsResp)
	err := c.cc.Invoke(ctx, GoodsRpc_RegistryGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsRpcClient) GoodsInfo(ctx context.Context, in *GoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsInfoResp)
	err := c.cc.Invoke(ctx, GoodsRpc_GoodsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsRpcServer is the server API for GoodsRpc service.
// All implementations must embed UnimplementedGoodsRpcServer
// for forward compatibility.
type GoodsRpcServer interface {
	RegistryGoods(context.Context, *RegistryGoodsReq) (*RegistryGoodsResp, error)
	GoodsInfo(context.Context, *GoodsInfoReq) (*GoodsInfoResp, error)
	mustEmbedUnimplementedGoodsRpcServer()
}

// UnimplementedGoodsRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoodsRpcServer struct{}

func (UnimplementedGoodsRpcServer) RegistryGoods(context.Context, *RegistryGoodsReq) (*RegistryGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryGoods not implemented")
}
func (UnimplementedGoodsRpcServer) GoodsInfo(context.Context, *GoodsInfoReq) (*GoodsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsInfo not implemented")
}
func (UnimplementedGoodsRpcServer) mustEmbedUnimplementedGoodsRpcServer() {}
func (UnimplementedGoodsRpcServer) testEmbeddedByValue()                  {}

// UnsafeGoodsRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsRpcServer will
// result in compilation errors.
type UnsafeGoodsRpcServer interface {
	mustEmbedUnimplementedGoodsRpcServer()
}

func RegisterGoodsRpcServer(s grpc.ServiceRegistrar, srv GoodsRpcServer) {
	// If the following call pancis, it indicates UnimplementedGoodsRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoodsRpc_ServiceDesc, srv)
}

func _GoodsRpc_RegistryGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsRpcServer).RegistryGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsRpc_RegistryGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsRpcServer).RegistryGoods(ctx, req.(*RegistryGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsRpc_GoodsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsRpcServer).GoodsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsRpc_GoodsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsRpcServer).GoodsInfo(ctx, req.(*GoodsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsRpc_ServiceDesc is the grpc.ServiceDesc for GoodsRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.GoodsRpc",
	HandlerType: (*GoodsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistryGoods",
			Handler:    _GoodsRpc_RegistryGoods_Handler,
		},
		{
			MethodName: "GoodsInfo",
			Handler:    _GoodsRpc_GoodsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
